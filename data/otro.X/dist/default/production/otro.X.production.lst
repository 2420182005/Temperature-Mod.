

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Nov 26 10:04:00 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172                           
   173                           	psect	idataCOMMON
   174  0768                     __pidataCOMMON:
   175                           
   176                           ;initializer for _a
   177  0768  3400               	retlw	0
   178  0769  3409               	retlw	9
   179                           
   180                           	psect	nvCOMMON
   181  0078                     __pnvCOMMON:
   182  0078                     _dato:
   183  0078                     	ds	2
   184  001E                     _ADRESH	set	30
   185  001F                     _ADCON0bits	set	31
   186  0034                     _RB4	set	52
   187  0033                     _RB3	set	51
   188  009E                     _ADRESL	set	158
   189  009F                     _ADCON1bits	set	159
   190  0434                     _TRISB4	set	1076
   191  0433                     _TRISB3	set	1075
   192                           
   193                           	psect	cinit
   194  07EC                     start_initialization:	
   195                           ; #config settings
   196                           
   197  07EC                     __initialization:
   198                           
   199                           ; Initialize objects allocated to COMMON
   200  07EC  120A  118A  2768  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   201  07F1  00FA               	movwf	__pdataCOMMON& (0+127)
   202  07F2  120A  118A  2769  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   203  07F7  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
   204                           
   205                           ; Clear objects allocated to COMMON
   206  07F8  01F0               	clrf	__pbssCOMMON& (0+127)
   207  07F9  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   208  07FA  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   209  07FB  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   210  07FC                     end_of_initialization:	
   211                           ;End of C runtime variable initialization code
   212                           
   213  07FC                     __end_of__initialization:
   214  07FC  0183               	clrf	3
   215  07FD  120A  118A  2F7D   	ljmp	_main	;jump to C main() function
   216                           
   217                           	psect	bssCOMMON
   218  0070                     __pbssCOMMON:
   219  0070                     _resultLow:
   220  0070                     	ds	2
   221  0072                     _resultHigh:
   222  0072                     	ds	2
   223                           
   224                           	psect	dataCOMMON
   225  007A                     __pdataCOMMON:
   226  007A                     _a:
   227  007A                     	ds	2
   228                           
   229                           	psect	cstackCOMMON
   230  0074                     __pcstackCOMMON:
   231  0074                     ?_ADC_init:
   232  0074                     ??_ADC_init:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0074                     ?_PIN_MANAGER_Initialize:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0074                     ??_PIN_MANAGER_Initialize:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0074                     ?_Duty:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0074                     ??_Duty:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0074                     ?_main:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0074                     ?_ADC_read:	
   251                           ; 1 bytes @ 0x0
   252                           
   253                           
   254                           ; 2 bytes @ 0x0
   255  0074                     	ds	2
   256  0076                     ??_ADC_read:
   257                           
   258                           ; 1 bytes @ 0x2
   259  0076                     	ds	1
   260  0077                     ADC_read@channel:
   261                           
   262                           ; 1 bytes @ 0x3
   263  0077                     	ds	1
   264  0078                     ??_main:
   265                           
   266                           	psect	maintext
   267  077D                     __pmaintext:	
   268                           ; 1 bytes @ 0x4
   269 ;;
   270 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   271 ;;
   272 ;; *************** function _main *****************
   273 ;; Defined at:
   274 ;;		line 57 in file "otro.c"
   275 ;; Parameters:    Size  Location     Type
   276 ;;		None
   277 ;; Auto vars:     Size  Location     Type
   278 ;;		None
   279 ;; Return value:  Size  Location     Type
   280 ;;                  1    wreg      void 
   281 ;; Registers used:
   282 ;;		wreg, status,2, status,0, pclath, cstack
   283 ;; Tracked objects:
   284 ;;		On entry : B00/0
   285 ;;		On exit  : 0/0
   286 ;;		Unchanged: 0/0
   287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   288 ;;      Params:         0       0       0       0       0
   289 ;;      Locals:         0       0       0       0       0
   290 ;;      Temps:          0       0       0       0       0
   291 ;;      Totals:         0       0       0       0       0
   292 ;;Total ram usage:        0 bytes
   293 ;; Hardware stack levels required when called:    1
   294 ;; This function calls:
   295 ;;		_ADC_init
   296 ;;		_ADC_read
   297 ;;		_Duty
   298 ;;		_PIN_MANAGER_Initialize
   299 ;; This function is called by:
   300 ;;		Startup code after reset
   301 ;; This function uses a non-reentrant model
   302 ;;
   303                           
   304                           
   305                           ;psect for function _main
   306  077D                     _main:
   307  077D                     l702:	
   308                           ;incstack = 0
   309                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   310                           
   311                           
   312                           ;otro.c: 59:     PIN_MANAGER_Initialize();
   313  077D  120A  118A  276A  120A  118A  	fcall	_PIN_MANAGER_Initialize
   314  0782                     l704:
   315                           
   316                           ;otro.c: 60:     ADC_init();
   317  0782  120A  118A  276F  120A  118A  	fcall	_ADC_init
   318  0787                     l706:
   319                           
   320                           ;otro.c: 62:     {;otro.c: 63:         dato = ADC_read(0);
   321  0787  3000               	movlw	0
   322  0788  120A  118A  279A  120A  118A  	fcall	_ADC_read
   323  078D  0875               	movf	?_ADC_read+1,w
   324  078E  00F9               	movwf	_dato+1
   325  078F  0874               	movf	?_ADC_read,w
   326  0790  00F8               	movwf	_dato
   327  0791                     l708:
   328                           
   329                           ;otro.c: 64:         Duty();
   330  0791  120A  118A  27B9  120A  118A  	fcall	_Duty
   331  0796  2F87               	goto	l706
   332  0797  120A  118A  2800   	ljmp	start
   333  079A                     __end_of_main:
   334                           
   335                           	psect	text1
   336  076A                     __ptext1:	
   337 ;; *************** function _PIN_MANAGER_Initialize *****************
   338 ;; Defined at:
   339 ;;		line 31 in file "otro.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		None
   348 ;; Tracked objects:
   349 ;;		On entry : 0/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   353 ;;      Params:         0       0       0       0       0
   354 ;;      Locals:         0       0       0       0       0
   355 ;;      Temps:          0       0       0       0       0
   356 ;;      Totals:         0       0       0       0       0
   357 ;;Total ram usage:        0 bytes
   358 ;; Hardware stack levels used:    1
   359 ;; This function calls:
   360 ;;		Nothing
   361 ;; This function is called by:
   362 ;;		_main
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           
   367                           ;psect for function _PIN_MANAGER_Initialize
   368  076A                     _PIN_MANAGER_Initialize:
   369  076A                     l668:	
   370                           ;incstack = 0
   371                           ; Regs used in _PIN_MANAGER_Initialize: []
   372                           
   373                           
   374                           ;otro.c: 33:     TRISB3=0;
   375  076A  1683               	bsf	3,5	;RP0=1, select bank1
   376  076B  1303               	bcf	3,6	;RP1=0, select bank1
   377  076C  1186               	bcf	6,3	;volatile
   378                           
   379                           ;otro.c: 34:     TRISB4=0;
   380  076D  1206               	bcf	6,4	;volatile
   381  076E                     l38:
   382  076E  0008               	return
   383  076F                     __end_of_PIN_MANAGER_Initialize:
   384                           
   385                           	psect	text2
   386  07B9                     __ptext2:	
   387 ;; *************** function _Duty *****************
   388 ;; Defined at:
   389 ;;		line 37 in file "otro.c"
   390 ;; Parameters:    Size  Location     Type
   391 ;;		None
   392 ;; Auto vars:     Size  Location     Type
   393 ;;		None
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      void 
   396 ;; Registers used:
   397 ;;		wreg
   398 ;; Tracked objects:
   399 ;;		On entry : 0/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   403 ;;      Params:         0       0       0       0       0
   404 ;;      Locals:         0       0       0       0       0
   405 ;;      Temps:          0       0       0       0       0
   406 ;;      Totals:         0       0       0       0       0
   407 ;;Total ram usage:        0 bytes
   408 ;; Hardware stack levels used:    1
   409 ;; This function calls:
   410 ;;		Nothing
   411 ;; This function is called by:
   412 ;;		_main
   413 ;; This function uses a non-reentrant model
   414 ;;
   415                           
   416                           
   417                           ;psect for function _Duty
   418  07B9                     _Duty:
   419  07B9                     l670:	
   420                           ;incstack = 0
   421                           ; Regs used in _Duty: [wreg]
   422                           
   423                           
   424                           ;otro.c: 40:     if(dato>=500)
   425  07B9  3001               	movlw	1
   426  07BA  0279               	subwf	_dato+1,w
   427  07BB  30F4               	movlw	244
   428  07BC  1903               	skipnz
   429  07BD  0278               	subwf	_dato,w
   430  07BE  1C03               	skipc
   431  07BF  2FC1               	goto	u21
   432  07C0  2FC2               	goto	u20
   433  07C1                     u21:
   434  07C1  2FC7               	goto	l674
   435  07C2                     u20:
   436  07C2                     l672:
   437                           
   438                           ;otro.c: 41:     {;otro.c: 42:         RB3=0;
   439  07C2  1283               	bcf	3,5	;RP0=0, select bank0
   440  07C3  1303               	bcf	3,6	;RP1=0, select bank0
   441  07C4  1186               	bcf	6,3	;volatile
   442                           
   443                           ;otro.c: 43:         RB4=1;
   444  07C5  1606               	bsf	6,4	;volatile
   445                           
   446                           ;otro.c: 44:     }
   447  07C6  2FEB               	goto	l46
   448  07C7                     l674:
   449  07C7  3001               	movlw	1
   450  07C8  0279               	subwf	_dato+1,w
   451  07C9  302C               	movlw	44
   452  07CA  1903               	skipnz
   453  07CB  0278               	subwf	_dato,w
   454  07CC  1C03               	skipc
   455  07CD  2FCF               	goto	u31
   456  07CE  2FD0               	goto	u30
   457  07CF                     u31:
   458  07CF  2FDE               	goto	l680
   459  07D0                     u30:
   460  07D0                     l676:
   461  07D0  3001               	movlw	1
   462  07D1  0279               	subwf	_dato+1,w
   463  07D2  30F4               	movlw	244
   464  07D3  1903               	skipnz
   465  07D4  0278               	subwf	_dato,w
   466  07D5  1803               	skipnc
   467  07D6  2FD8               	goto	u41
   468  07D7  2FD9               	goto	u40
   469  07D8                     u41:
   470  07D8  2FDE               	goto	l680
   471  07D9                     u40:
   472  07D9                     l678:
   473                           
   474                           ;otro.c: 46:     {;otro.c: 47:         RB3=0;
   475  07D9  1283               	bcf	3,5	;RP0=0, select bank0
   476  07DA  1303               	bcf	3,6	;RP1=0, select bank0
   477  07DB  1186               	bcf	6,3	;volatile
   478                           
   479                           ;otro.c: 48:         RB4=0;
   480  07DC  1206               	bcf	6,4	;volatile
   481                           
   482                           ;otro.c: 49:     }
   483  07DD  2FEB               	goto	l46
   484  07DE                     l680:
   485  07DE  3001               	movlw	1
   486  07DF  0279               	subwf	_dato+1,w
   487  07E0  302C               	movlw	44
   488  07E1  1903               	skipnz
   489  07E2  0278               	subwf	_dato,w
   490  07E3  1803               	skipnc
   491  07E4  2FE6               	goto	u51
   492  07E5  2FE7               	goto	u50
   493  07E6                     u51:
   494  07E6  2FEB               	goto	l46
   495  07E7                     u50:
   496  07E7                     l682:
   497                           
   498                           ;otro.c: 51:     {;otro.c: 52:         RB3=1;
   499  07E7  1283               	bcf	3,5	;RP0=0, select bank0
   500  07E8  1303               	bcf	3,6	;RP1=0, select bank0
   501  07E9  1586               	bsf	6,3	;volatile
   502                           
   503                           ;otro.c: 53:         RB4=0;
   504  07EA  1206               	bcf	6,4	;volatile
   505  07EB                     l46:
   506  07EB  0008               	return
   507  07EC                     __end_of_Duty:
   508                           
   509                           	psect	text3
   510  079A                     __ptext3:	
   511 ;; *************** function _ADC_read *****************
   512 ;; Defined at:
   513 ;;		line 30 in file "./ADC.h"
   514 ;; Parameters:    Size  Location     Type
   515 ;;  channel         1    wreg     unsigned char 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  channel         1    3[COMMON] unsigned char 
   518 ;; Return value:  Size  Location     Type
   519 ;;                  2    0[COMMON] unsigned int 
   520 ;; Registers used:
   521 ;;		wreg, status,2, status,0
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   527 ;;      Params:         2       0       0       0       0
   528 ;;      Locals:         1       0       0       0       0
   529 ;;      Temps:          1       0       0       0       0
   530 ;;      Totals:         4       0       0       0       0
   531 ;;Total ram usage:        4 bytes
   532 ;; Hardware stack levels used:    1
   533 ;; This function calls:
   534 ;;		Nothing
   535 ;; This function is called by:
   536 ;;		_main
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540                           
   541                           ;psect for function _ADC_read
   542  079A                     _ADC_read:
   543                           
   544                           ;incstack = 0
   545                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
   546                           ;ADC_read@channel stored from wreg
   547  079A  00F7               	movwf	ADC_read@channel
   548  079B                     l692:
   549                           
   550                           ;./ADC.h: 30: uint16_t ADC_read(uint8_t channel);./ADC.h: 31: {;./ADC.h: 32:     ADCON0b
      +                          its.ADCS = channel;
   551  079B  0877               	movf	ADC_read@channel,w
   552  079C  00F6               	movwf	??_ADC_read
   553  079D  0EF6               	swapf	??_ADC_read,f
   554  079E  0DF6               	rlf	??_ADC_read,f
   555  079F  0DF6               	rlf	??_ADC_read,f
   556  07A0  1283               	bcf	3,5	;RP0=0, select bank0
   557  07A1  1303               	bcf	3,6	;RP1=0, select bank0
   558  07A2  081F               	movf	31,w	;volatile
   559  07A3  0676               	xorwf	??_ADC_read,w
   560  07A4  393F               	andlw	-193
   561  07A5  0676               	xorwf	??_ADC_read,w
   562  07A6  009F               	movwf	31	;volatile
   563  07A7                     l694:
   564                           
   565                           ;./ADC.h: 33:     _delay((unsigned long)((25)*(4000000/4000000.0)));
   566  07A7  3008               	movlw	8
   567  07A8  00F6               	movwf	??_ADC_read
   568  07A9                     u77:
   569  07A9  0BF6               	decfsz	??_ADC_read,f
   570  07AA  2FA9               	goto	u77
   571  07AB                     l696:
   572                           
   573                           ;./ADC.h: 34:     ADCON0bits.GO = 1;
   574  07AB  1283               	bcf	3,5	;RP0=0, select bank0
   575  07AC  1303               	bcf	3,6	;RP1=0, select bank0
   576  07AD  151F               	bsf	31,2	;volatile
   577  07AE                     l24:	
   578                           ;./ADC.h: 35:     while(ADCON0bits.GO_DONE);
   579                           
   580  07AE  191F               	btfsc	31,2	;volatile
   581  07AF  2FB1               	goto	u61
   582  07B0  2FB2               	goto	u60
   583  07B1                     u61:
   584  07B1  2FAE               	goto	l24
   585  07B2                     u60:
   586  07B2                     l698:
   587                           
   588                           ;./ADC.h: 36:     return ((uint16_t)((ADRESH<<8)+ADRESL));
   589  07B2  081E               	movf	30,w	;volatile
   590  07B3  00F5               	movwf	?_ADC_read+1
   591  07B4  1683               	bsf	3,5	;RP0=1, select bank1
   592  07B5  1303               	bcf	3,6	;RP1=0, select bank1
   593  07B6  081E               	movf	30,w	;volatile
   594  07B7  00F4               	movwf	?_ADC_read
   595  07B8                     l27:
   596  07B8  0008               	return
   597  07B9                     __end_of_ADC_read:
   598                           
   599                           	psect	text4
   600  076F                     __ptext4:	
   601 ;; *************** function _ADC_init *****************
   602 ;; Defined at:
   603 ;;		line 16 in file "./ADC.h"
   604 ;; Parameters:    Size  Location     Type
   605 ;;		None
   606 ;; Auto vars:     Size  Location     Type
   607 ;;		None
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, status,2, status,0
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   617 ;;      Params:         0       0       0       0       0
   618 ;;      Locals:         0       0       0       0       0
   619 ;;      Temps:          0       0       0       0       0
   620 ;;      Totals:         0       0       0       0       0
   621 ;;Total ram usage:        0 bytes
   622 ;; Hardware stack levels used:    1
   623 ;; This function calls:
   624 ;;		Nothing
   625 ;; This function is called by:
   626 ;;		_main
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           
   631                           ;psect for function _ADC_init
   632  076F                     _ADC_init:
   633  076F                     l646:	
   634                           ;incstack = 0
   635                           ; Regs used in _ADC_init: [wreg+status,2+status,0]
   636                           
   637                           
   638                           ;./ADC.h: 18:     ADCON1bits.ADFM = 1;
   639  076F  1683               	bsf	3,5	;RP0=1, select bank1
   640  0770  1303               	bcf	3,6	;RP1=0, select bank1
   641  0771  179F               	bsf	31,7	;volatile
   642  0772                     l648:
   643                           
   644                           ;./ADC.h: 19:     ADCON1bits.PCFG = 0b1110;
   645  0772  081F               	movf	31,w	;volatile
   646  0773  39F0               	andlw	-16
   647  0774  380E               	iorlw	14
   648  0775  009F               	movwf	31	;volatile
   649  0776                     l650:
   650                           
   651                           ;./ADC.h: 20:     ADCON1bits.ADCS2 = 0;
   652  0776  131F               	bcf	31,6	;volatile
   653  0777                     l652:
   654                           
   655                           ;./ADC.h: 21:     ADCON0bits.ADCS1 = 0;
   656  0777  1283               	bcf	3,5	;RP0=0, select bank0
   657  0778  1303               	bcf	3,6	;RP1=0, select bank0
   658  0779  139F               	bcf	31,7	;volatile
   659  077A                     l654:
   660                           
   661                           ;./ADC.h: 22:     ADCON0bits.ADCS1 = 1;
   662  077A  179F               	bsf	31,7	;volatile
   663  077B                     l656:
   664                           
   665                           ;./ADC.h: 23:     ADCON0bits.ADON = 1;
   666  077B  141F               	bsf	31,0	;volatile
   667  077C                     l21:
   668  077C  0008               	return
   669  077D                     __end_of_ADC_init:
   670  007E                     btemp	set	126	;btemp
   671  007E                     wtemp0	set	126
   672                           
   673                           	psect	config
   674                           
   675                           ;Config register CONFIG @ 0x2007
   676                           ;	Oscillator Selection bits
   677                           ;	FOSC = XT, XT oscillator
   678                           ;	Watchdog Timer Enable bit
   679                           ;	WDTE = OFF, WDT disabled
   680                           ;	Power-up Timer Enable bit
   681                           ;	PWRTE = OFF, PWRT disabled
   682                           ;	Brown-out Reset Enable bit
   683                           ;	BOREN = ON, BOR enabled
   684                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   685                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
   686                           ;	Data EEPROM Memory Code Protection bit
   687                           ;	CPD = OFF, Data EEPROM code protection off
   688                           ;	Flash Program Memory Write Enable bits
   689                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   690                           ;	In-Circuit Debugger Mode bit
   691                           ;	DEBUG = 0x1, unprogrammed default
   692                           ;	Flash Program Memory Code Protection bit
   693                           ;	CP = OFF, Code protection off
   694  2007                     	org	8199
   695  2007  3FF9               	dw	16377

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         4
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      22
                           _ADC_init
                           _ADC_read
                               _Duty
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Duty                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_read
   _Duty
   _PIN_MANAGER_Initialize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      4       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       C      12        0.0%
ABS                  0      0       C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Nov 26 10:04:00 2020

                              _a 007A                               l21 077C                               l24 07AE  
                             l27 07B8                               l46 07EB                               l38 076E  
                             u20 07C2                               u21 07C1                               u30 07D0  
                             u31 07CF                               u40 07D9                               u41 07D8  
                             u50 07E7                               u51 07E6                               u60 07B2  
                             u61 07B1                               u77 07A9                              l702 077D  
                            l704 0782                              l650 0776                              l706 0787  
                            l652 0777                              l708 0791                              l654 077A  
                            l646 076F                              l670 07B9                              l656 077B  
                            l648 0772                              l680 07DE                              l672 07C2  
                            l682 07E7                              l674 07C7                              l692 079B  
                            l676 07D0                              l668 076A                              l694 07A7  
                            l678 07D9                              l696 07AB                              l698 07B2  
                            _RB3 0033                              _RB4 0034                             _Duty 07B9  
                           _dato 0078                             _main 077D                             btemp 007E  
                           start 0000                 __end_of_ADC_init 077D                 __end_of_ADC_read 07B9  
                          ?_Duty 0074                            ?_main 0074                            status 0003  
                          wtemp0 007E                  __initialization 07EC                     __end_of_Duty 07EC  
                   __end_of_main 079A                           ??_Duty 0074                           ??_main 0078  
                         _ADRESH 001E                           _ADRESL 009E                           _TRISB3 0433  
                         _TRISB4 0434                     __pdataCOMMON 007A                        ?_ADC_init 0074  
                      ?_ADC_read 0074          __end_of__initialization 07FC                   __pcstackCOMMON 0074  
                ADC_read@channel 0077                       ??_ADC_init 0074                       ??_ADC_read 0076  
                     __pnvCOMMON 0078                       __pmaintext 077D                          __ptext1 076A  
                        __ptext2 07B9                          __ptext3 079A                          __ptext4 076F  
       ??_PIN_MANAGER_Initialize 0074             end_of_initialization 07FC                       _resultHigh 0072  
              __size_of_ADC_init 000E                __size_of_ADC_read 001F                    __pidataCOMMON 0768  
            start_initialization 07EC  __size_of_PIN_MANAGER_Initialize 0005                      __pbssCOMMON 0070  
                      ___latbits 0002           _PIN_MANAGER_Initialize 076A                         _ADC_init 076F  
                       _ADC_read 079A                        _resultLow 0070                       _ADCON0bits 001F  
                     _ADCON1bits 009F                    __size_of_Duty 0033                    __size_of_main 001D  
        ?_PIN_MANAGER_Initialize 0074   __end_of_PIN_MANAGER_Initialize 076F  
